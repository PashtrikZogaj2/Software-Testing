import { test, expect, chromium, firefox, webkit } from '@playwright/test';


//Testi i pare kryesisht per funksionimin e butonave,formave.
test('Testi 1: PlotÃ«simi i formÃ«s pÃ«r veturÃ«n', async ({ page }) => {
  // Hap faqen
  await page.goto('https://kselsig.com/');

  await page.waitForTimeout(2000);

  // Kliko butonin "Lexo mÃ« shumÃ«"
  await page.getByRole('link', { name: 'lexo mÃ« shumÃ«' }).nth(3).click();
  await page.waitForTimeout(2000);

  // PlotÃ«so fushat e formÃ«s
  const emri = page.locator('input[name="emri"]');
  await emri.fill('Pashtrik Zogaj');
  await page.locator('input[name="nrTelefonit"]').fill('+38349180538');
  await page.locator('input[name="email"]').fill('zogajpashtrik@gmail.com');
  await page.locator('input[name="modeliVetures"]').fill('IT Service');
  await page.locator('input[name="vleraVetures"]').fill('20');
  await page.locator('textarea[name="koment"]').fill('Jo nuk kam.');

  // Kliko butonin "DÃ«rgo tÃ« dhÃ«nat"
  await page.getByRole('button', { name: 'DÃ«rgo tÃ« dhÃ«nat' }).click();

  // Prisni disa sekonda pÃ«r tÃ« parÃ« efektin
  await page.waitForTimeout(2000);

  // Kontrollo nÃ«se fusha Ã«shtÃ« bosh pas klikimit
  await expect(emri).toHaveValue('');
});


//Ky test deshton shkaku qe captcha nuk mbeshtet testet automatike.Ky test eshte nje test qe i bbehet 
//si lloj register ose log in form meqense elsig nuk ka register dhe log in form
test.skip('Testi 2: PlotÃ«simi i formÃ«s sÃ« ankesave', async ({ page }) => {
  // Hape faqen dhe prit pak pÃ«r ngarkim
  await page.goto('https://kselsig.com/');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Ankesa'
  await page.getByRole('link', { name: 'Ankesa' }).click();
  await page.waitForTimeout(1000);

  // PlotÃ«so fushat e formularit
  const formData = [
    { name: 'emri', value: 'Pashtrik' },
    { name: 'mbiemri', value: 'Zogaj' },
    { name: 'nrPersonal', value: '1248090123' },
    { name: 'adresa', value: 'Ulpiane' },
    { name: 'qyteti', value: 'Prishtine' },
    { name: 'nrTelefonit', value: '1234123456' },
    { name: 'email', value: 'pashtrik.zogaj@student.uni-pr.edu' },
    { name: 'perfaqesuesi_emri', value: 'NPT Shpk' },
    { name: 'perfaqesuesi_mbiemri', value: 'Zogaj' },
    { name: 'perfaqesuesi_nrPersonal', value: '00099988' },
    { name: 'perfaqesuesi_adresa', value: 'Prishtine' },
    { name: 'perfaqesuesi_qyteti', value: 'Prishtine' },
    { name: 'perfaqesuesi_nrTelefonit', value: '235474960' },
    { name: 'perfaqesuesi_email', value: 'pashtrik.zogaj@student.uni-pr.edu' }
  ];

  for (const field of formData) {
    await page.locator(`input[name="${field.name}"]`).fill(field.value);
    await page.waitForTimeout(500);
  }

  // PlotÃ«so fushat e pÃ«rshkrimeve
  
const descriptions = [
  { name: 'pershkrimiAnkeses', value: 'Ankese per jo korrektesi' },
  { name: 'pershkrimiDemit', value: 'Rast Zjarri' },
  { name: 'komenteTjera', value: 'Jo' }
];

  for (const desc of descriptions) {
    await page.locator(`textarea[name="${desc.name}"]`).fill(desc.value);
    await page.waitForTimeout(500);
  }

  // Prano termat dhe kushtet
  await page.locator('#acceptTerms').check();
  await page.waitForTimeout(1000);

 // If the span is directly on the page
//await page.locator('span.cb-i').click();





  // Kliko butonin pÃ«r tÃ« dÃ«rguar formularin
  await page.getByRole('button', { name: 'DÃ«rgo mesazhin' }).click();

 

});



//Ky test vetem e bene nje verifikim te linkut 
test('Verifikimi i linkut', async ({ page }) => {
  await page.goto('https://kselsig.com/'); // Hape faqen kryesore
  const link = await page.getByRole('link', { name: 'APSIG' });

  if (await link.isVisible()) {
    await link.click(); // Kliko linkun
    await page.waitForTimeout(2000); // Prit pak pÃ«r tÃ« parÃ« nÃ«se hapet faqja e re

    // Merr URL-nÃ« e faqes aktive pas klikimit
    const newPageURL = page.url(); 

    // Printo nÃ« terminal pÃ«r tÃ« treguar se linku Ã«shtÃ« klikuar
    console.log(`Klikova linkun, por u hap njÃ« faqe me kÃ«tÃ« URL: ${newPageURL}`);
  } else {
    console.log("Gabim: Linku 'APSIG' nuk u gjet!");
  }
});









//Ky test verifikon qe hapet nje faqe tjeter(outlook-i)dhe verfikon funksionimin e linkut
test('Verifikimi i linkut te emailit', async ({ page }) => {
  await page.goto('https://kselsig.com/');
  await page.waitForTimeout(2000);

  // BÃ«j scroll nÃ« fund tÃ« faqes pÃ«r tÃ« zbuluar linkun mailto
  await page.evaluate(() => window.scrollTo(0, document.body.scrollHeight));
  await page.waitForTimeout(2000);

  // Gjej tÃ« gjithÃ« linkÃ«t mailto
  const mailtoLinks = await page.locator('a[href^="mailto:"]').all();

  // Printo tÃ« gjithÃ« linkÃ«t e gjetur pÃ«r tÃ« parÃ« nÃ«se Ã«shtÃ« ai qÃ« dÃ«shiron
  for (const link of mailtoLinks) {
    const href = await link.getAttribute('href');
    console.log('ğŸ“© Link mailto i gjetur:', href);
  }

  // Gjej linkun 'mailto:office@kselsig.com'
  const mailtoLink = mailtoLinks.find(async (link) => 
    (await link.getAttribute('href')) === 'mailto:office@kselsig.com'
  );

  // Kontrollo qÃ« linku ekziston
  expect(mailtoLink).not.toBeNull();

  // Kliko linkun
  if (mailtoLink) {
    await mailtoLink.click();
  }
});







//Ky test verfikon validimin ndermjet faqeve renda Elsig
test('Navigimi ndermjet faqeve', async ({ page }) => {
  await page.goto('https://kselsig.com/');
  console.log('âœ… U hap faqja kryesore.');

  // BÃ«j scroll ngadalÃ« deri nÃ« fund tÃ« faqes
  await page.evaluate(async () => {
    const distance = 100;
    const delay = 50;
    const scrollHeight = document.body.scrollHeight;
    
    for (let i = 0; i < scrollHeight; i += distance) {
      window.scrollBy(0, distance);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  });
  console.log('âœ… U bÃ« scroll ngadalÃ« deri nÃ« fund tÃ« faqes.');
  await page.waitForTimeout(2000);

  // Kthehuni ngadalÃ« nÃ« fillim tÃ« faqes
  await page.evaluate(async () => {
    const distance = 100;
    const delay = 50;
    
    for (let i = document.body.scrollHeight; i > 0; i -= distance) {
      window.scrollBy(0, -distance);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  });
  console.log('âœ… U bÃ« scroll ngadalÃ« deri nÃ« fillim tÃ« faqes.');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'PÃ«r ne' dhe kontrollo qÃ« "MirÃ«sevini nÃ« Elsig" shfaqet
  await page.getByRole('link', { name: 'PÃ«r ne' }).first().click();
  console.log('âœ… Klikoi nÃ« "PÃ«r ne".');
  await page.waitForTimeout(2000);
  await page.getByText('MirÃ«sevini nÃ« Elsig').click();
  console.log('âœ… Shfaqet "MirÃ«sevini nÃ« Elsig".');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Zyrat e shitjes' dhe kontrollo qÃ« "Zyra e shitjes" shfaqet
  await page.getByRole('link', { name: 'Zyrat e shitjes' }).click();
  console.log('âœ… Klikoi nÃ« "Zyrat e shitjes".');
  await page.waitForTimeout(2000);
  await page.getByText('Zyra e shitjes').click();
  console.log('âœ… Shfaqet "Zyra e shitjes".');
  await page.waitForTimeout(2000);
  await page.getByRole('heading', { name: 'Shtrirja e zyreve tÃ« shitjes' }).click();
  console.log('âœ… Shfaqet "Shtrirja e zyreve tÃ« shitjes".');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Kontakti'
  await page.getByRole('link', { name: 'Kontakti' }).first().click();
  console.log('âœ… Klikoi nÃ« "Kontakti".');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Ankesa' dhe kontrollo qÃ« "Forma pÃ«r ankesÃ«" shfaqet
  await page.getByRole('link', { name: 'Ankesa' }).click();
  console.log('âœ… Klikoi nÃ« "Ankesa".');
  await page.waitForTimeout(2000);
  await page.getByRole('heading', { name: 'Forma pÃ«r ankesÃ«' }).click();
  console.log('âœ… Shfaqet "Forma pÃ«r ankesÃ«".');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Pyetjet e shpeshta' dhe kontrollo qÃ« "Pyetje tÃ« pÃ«rgjithshme" shfaqet
  await page.getByRole('link', { name: 'Pyetjet e shpeshta' }).click();
  console.log('âœ… Klikoi nÃ« "Pyetjet e shpeshta".');
  await page.waitForTimeout(2000);

  // Kliko nÃ« 'Pse duhet tÃ« sigurohemi?'
  await page.getByRole('link', { name: 'Pse duhet tÃ« sigurohemi?' }).click();
  console.log('âœ… Klikoi nÃ« "Pse duhet tÃ« sigurohemi?".');
  await page.waitForTimeout(2000);
});






//Edhe nje verfikim i linkut dhe gjithashtu verfikon nje lehtesi te perdorimit
test('verifikimi i linkut', async ({ page }) => {
  await page.goto('https://kselsig.com/');
  console.log('âœ… U hap faqja kryesore.');
  await page.waitForTimeout(2000); // Prit 2 sekonda pas hapjes sÃ« faqes

  // BÃ«j scroll tÃ« vogÃ«l (1-2 herÃ«) para se tÃ« klikohet nÃ« link
  await page.evaluate(async () => {
    window.scrollBy(0, 400); // Scroll 100px poshtÃ«
  });
  console.log('âœ… U bÃ« scroll i vogÃ«l.');
  await page.waitForTimeout(2000); // Prit 2 sekonda pas scroll-it

  // Kliko nÃ« "PYETÃ‹SORI PÃ‹R SIGURIM SHÃ‹NDET"
  await page.getByRole('link', { name: 'PYETÃ‹SORI PÃ‹R SIGURIM SHÃ‹NDET' }).click();
  console.log('âœ… Klikoi nÃ« "PYETÃ‹SORI PÃ‹R SIGURIM SHÃ‹NDET".');
  await page.waitForTimeout(2000); // Prit 2 sekonda pas klikimit
});



//Me nje test te vogel nje lehtesi te persorimit te  faqes
test('Testimi i lehtÃ«sisÃ« sÃ« pÃ«rdorimit', async ({ page }) => {
  await page.goto('https://kselsig.com/');
  await page.waitForTimeout(2000); // Prit 2 sekonda pas hapjes sÃ« faqes

  // Merr linkun e parÃ« me emrin "PÃ«r ne"
  const butoniPerNe = await page.getByRole('link', { name: 'PÃ«r ne' }).first(); //faqja a dy per ne
  // dhe perdore .first per te treguar se te klikoj tek butoni per ne i pari qe shfaqet pasi qe edhe nje per ne eshte ne footer

  expect(await butoniPerNe.isVisible()).toBeTruthy(); // Duhet tÃ« jetÃ« i dukshÃ«m
  await page.waitForTimeout(2000); // Prit 2 sekonda para klikimit

  await butoniPerNe.click();
  console.log('âœ… Klikoi me sukses nÃ« "PÃ«r ne".');
  await page.waitForTimeout(2000); // Prit 2 sekonda pas klikimit

  // Kontrollo nÃ«se Ã«shtÃ« hapur faqja e duhur
  await expect(page).toHaveURL(/per_ne/);
  console.log('âœ… Navigimi funksionon siÃ§ duhet.');
});




//Ky test UL/UX tregon se butoni per ne nuk zhduket,nuk ndryshohet funksioni i tij edhe pasi
//te ndryshohet formati i faqes
test('Testimi i konsistencÃ«s sÃ« dizajnit', async ({ page }) => {
  // Hape faqen dhe presi deri sa tÃ« ngarkohen tÃ« gjitha elementet
  await page.goto('https://kselsig.com/', { timeout: 6000 }); // RritÃ«m timeout pÃ«r ngarkim
  await page.waitForSelector('a[href="per_ne"]', { timeout: 5000 }); // Prit deri sa tÃ« jetÃ« i disponueshÃ«m linku 'PÃ«r ne'

  // Merr linkun e parÃ« me emrin "PÃ«r ne"
  const butoniPÃ«rNe = await page.getByRole('link', { name: 'PÃ«r ne' }).first();

  // Kontrollo qÃ« butoni Ã«shtÃ« i dukshÃ«m dhe funksional
  expect(await butoniPÃ«rNe.isVisible()).toBeTruthy();
  await butoniPÃ«rNe.click({ timeout: 5000 }); // 5 sekonda timeout pÃ«r klikim

  // Kontrollo nÃ«se faqja e duhur hapet
  await expect(page).toHaveURL(/per_ne/, { timeout: 3000 }); // 3 sekonda timeout pÃ«r kontrollin e URL-sÃ«

  // Testo dizajnin nÃ« pÃ«rgjigje
  await page.setViewportSize({ width: 375, height: 667 }); // Rregullimi i pamjes pÃ«r celular
  await page.waitForTimeout(10000); // Pritje pÃ«r 2 sekonda pas ndryshimit tÃ« pamjes
  const butoniMobil = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await butoniMobil.isVisible()).toBeTruthy();

  console.log('âœ… Dizajni Ã«shtÃ« konsistent dhe pÃ«rgjigjÃ«s.');
});










//Test per shfletues te ndryshem
test.describe.parallel('Testimi nÃ« shfletues tÃ« ndryshÃ«m', () => {

  test('Testimi nÃ« Chrome', async () => {
    const browser = await chromium.launch(); // Start Chrome
    const page = await browser.newPage();
    await page.goto('https://kselsig.com/');
    await page.waitForTimeout(10000);

    // Shtoni testet qÃ« duhet tÃ« ekzekutohen nÃ« Chrome
    const butoniPerNe = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
    expect(await butoniPerNe.isVisible()).toBeTruthy();
    await butoniPerNe.click();
    await expect(page).toHaveURL(/per_ne/);

    await browser.close();
  });

  test('Testimi nÃ« Firefox', async () => {
    const browser = await firefox.launch(); // Start Firefox
    const page = await browser.newPage();
    await page.goto('https://kselsig.com/');
    await page.waitForTimeout(10000);

    // Shtoni testet qÃ« duhet tÃ« ekzekutohen nÃ« Firefox
    const butoniPerNe = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
    expect(await butoniPerNe.isVisible()).toBeTruthy();
    await butoniPerNe.click();
    await expect(page).toHaveURL(/per_ne/);

    await browser.close();
  });

  test('Testimi nÃ« Safari (WebKit)', async () => {
    const browser = await webkit.launch(); // Start Safari (WebKit)
    const page = await browser.newPage();
    await page.goto('https://kselsig.com/');
    await page.waitForTimeout(10000);

    // Shtoni testet qÃ« duhet tÃ« ekzekutohen nÃ« Safari
    const butoniPerNe = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
    expect(await butoniPerNe.isVisible()).toBeTruthy();
    await butoniPerNe.click();
    await expect(page).toHaveURL(/per_ne/);

    await browser.close();
  });

});








// Testimi per madhesi te ndryshme te ekranit
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

test('Testimi nÃ« pajisje me madhÃ«si tÃ« ndryshme tÃ« ekranit', async ({ page }) => {
  // Hape faqen dhe pÃ«rdor timeout pÃ«r ngarkimin e faqes
  await page.goto('https://kselsig.com/', { timeout: 3000 }); // 5 sekonda timeout pÃ«r ngarkimin e faqes
  await delay(2000); // 2 sekonda vonesÃ« pÃ«r t'u siguruar qÃ« faqja Ã«shtÃ« ngarkuar plotÃ«sisht

  // Testimi nÃ« Desktop (MadhÃ«sia e ekranit: 1920x1080)
  await page.setViewportSize({ width: 1920, height: 1080 });
  await delay(3000); // 2 sekonda vonesÃ« pÃ«r tÃ« dhÃ«nÃ« kohÃ« pÃ«r tÃ« aplikuar madhÃ«sinÃ«
  console.log('Testimi nÃ« Desktop...');
  const buttonDesktop = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonDesktop.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« desktop').toBeTruthy();
  await buttonDesktop.click({ timeout: 5000 }); // 5 sekonda timeout pÃ«r klikim
  await expect(page).toHaveURL(/per_ne/, { timeout: 5000 }); // 5 sekonda timeout pÃ«r kontrollin e URL-sÃ«
  await delay(2000); // 2 sekonda vonesÃ« pas klikimit

  // Testimi nÃ« Tablet (MadhÃ«sia e ekranit: 768x1024)
  await page.setViewportSize({ width: 768, height: 1024 });
  await delay(3000); // 2 sekonda vonesÃ« pÃ«r tÃ« dhÃ«nÃ« kohÃ« pÃ«r tÃ« aplikuar madhÃ«sinÃ«
  console.log('Testimi nÃ« Tablet...');
  const buttonTablet = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonTablet.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« tablet').toBeTruthy();
  await buttonTablet.click({ timeout: 5000 }); // 5 sekonda timeout pÃ«r klikim
  await expect(page).toHaveURL(/per_ne/, { timeout: 5000 }); // 5 sekonda timeout pÃ«r kontrollin e URL-sÃ«
  await delay(2000); // 2 sekonda vonesÃ« pas klikimit

  // Testimi nÃ« Smartphone (MadhÃ«sia e ekranit: 375x667)
  await page.setViewportSize({ width: 375, height: 667 });
  await delay(3000); // 2 sekonda vonesÃ« pÃ«r tÃ« dhÃ«nÃ« kohÃ« pÃ«r tÃ« aplikuar madhÃ«sinÃ«
  console.log('Testimi nÃ« Smartphone...');
  const buttonMobile = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonMobile.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« smartphone').toBeTruthy();
  await buttonMobile.click({ timeout: 5000 }); // 5 sekonda timeout pÃ«r klikim
  await expect(page).toHaveURL(/per_ne/, { timeout: 5000 }); // 5 sekonda timeout pÃ«r kontrollin e URL-sÃ«
  await delay(2000); // 2 sekonda vonesÃ« pas klikimit

  console.log('âœ… Testimi pÃ«r pajisje tÃ« ndryshme Ã«shtÃ« i suksesshÃ«m.');
});



//Pershtatja e faqes ne madhesi te ndryshme te ekranit
test('Testimi Responzivitetit', async ({ page }) => {
  // Hape faqen
  await page.goto('https://kselsig.com/', { timeout: 5000 });

  // Testimi nÃ« Desktop (MadhÃ«sia e ekranit: 1920x1080)
  await page.setViewportSize({ width: 1920, height: 1080 });
  console.log('Testimi nÃ« Desktop...');
  await page.waitForTimeout(2000); // Shtoni njÃ« vonesÃ« prej 2 sekondash
  const buttonDesktop = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonDesktop.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« desktop').toBeTruthy();
  await buttonDesktop.click({ timeout: 4000 });
  await expect(page).toHaveURL(/per_ne/, { timeout: 4000 });

  // Testimi nÃ« Tablet (MadhÃ«sia e ekranit: 768x1024)
  await page.setViewportSize({ width: 768, height: 1024 });
  console.log('Testimi nÃ« Tablet...');
  await page.waitForTimeout(2000); // Shtoni njÃ« vonesÃ« prej 2 sekondash
  const buttonTablet = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonTablet.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« tablet').toBeTruthy();
  await buttonTablet.click({ timeout: 4000 });
  await expect(page).toHaveURL(/per_ne/, { timeout: 4000 });

  // Testimi nÃ« Smartphone (MadhÃ«sia e ekranit: 375x667)
  await page.setViewportSize({ width: 375, height: 667 });
  console.log('Testimi nÃ« Smartphone...');
  await page.waitForTimeout(2000); // Shtoni njÃ« vonesÃ« prej 2 sekondash
  const buttonMobile = await page.getByRole('link', { name: 'PÃ«r ne' }).first();
  expect(await buttonMobile.isVisible(), 'Butoni nuk Ã«shtÃ« i dukshÃ«m nÃ« smartphone').toBeTruthy();
  await buttonMobile.click({ timeout: 4000 });
  await expect(page).toHaveURL(/per_ne/, { timeout: 4000 });

  console.log('âœ… Testimi i dizajnit pÃ«rgjigjÃ«s Ã«shtÃ« i suksesshÃ«m.');
});




//Nje verifikim qe faqja pavaresisht buttonit per perkthim nuk ka arritur te beje perkthimin
test('Verifikimi qÃ« butoni "English" nuk bÃ«n pÃ«rkthim', async ({ page }) => {
  // Hape faqen
  await page.goto('https://kselsig.com/');

  // Merr tekstin origjinal nÃ« gjuhÃ«n qÃ« Ã«shtÃ« aktualisht
  const tekstOrigjinal = await page.textContent('body'); // Mund tÃ« pÃ«rshtatet pÃ«r elemente specifikÃ« tÃ« faqes

  // Kliko nÃ« butonin 'GjuhÃ«t'
  await page.getByText('GjuhÃ«t').click();

  // Kliko nÃ« butonin 'English'
  await page.getByRole('link', { name: 'English' }).click();

  // Prit pak kohÃ« qÃ« tÃ« ndodhi pÃ«rkthimi
  await page.waitForTimeout(2000); // 2 sekonda pÃ«r tÃ« pasur mundÃ«si qÃ« pÃ«rkthimi tÃ« ndodhÃ«

  // Merr tekstin pas klikut
  const tekstPasKlikimit = await page.textContent('body'); // Mund tÃ« pÃ«rshtatet pÃ«r elemente specifikÃ« tÃ« faqes

  // Verifikoni qÃ« pÃ«rmbajtja nuk ka ndryshuar
  expect(tekstOrigjinal).toBe(tekstPasKlikimit);

  console.log('âœ… Testi dÃ«shtoi sepse pÃ«rkthimi nuk ndodhi!');
});



//Nje test qe deshmon shpejtesin e ngarkimit te faqeve 
test('Testimi i shpejtÃ«sisÃ« sÃ« ngarkimit tÃ« faqes kryesore', async ({ page }) => {
  const startTime = Date.now(); // Merr kohÃ«n e fillimit

  // Hape faqen e kryesore
  await page.goto('https://kselsig.com/', { waitUntil: 'load' });

  const endTime = Date.now(); // Merr kohÃ«n e pÃ«rfundimit
  const loadTime = endTime - startTime; // Llogarit kohÃ«n e ngarkimit

  console.log(`KohÃ« ngarkimi: ${loadTime} ms`); // Shfaq kohÃ«n e ngarkimit nÃ« ms

  // PÃ«rcakto njÃ« kufi maksimal tÃ« pranueshÃ«m pÃ«r ngarkimin, p.sh. 5000 ms (5 sekonda)
  expect(loadTime).toBeLessThan(5000); // Verifikoni qÃ« koha e ngarkimit tÃ« jetÃ« mÃ« e vogÃ«l se 5000 ms
});




test.only('Testimi i shpejtÃ«sisÃ« sÃ« ngarkimit tÃ« faqes kryesore dhe faqeve tÃ« tjera', async ({ page }) => {
  // Funksion pÃ«r tÃ« matur kohÃ«n e ngarkimit
  const measureLoadTime = async (url) => {
    const startTime = Date.now(); // Merr kohÃ«n e fillimit
    await page.goto(url, { waitUntil: 'load' }); // Ngarko faqen dhe presim qÃ« tÃ« jetÃ« ngarkuar plotÃ«sisht
    const endTime = Date.now(); // Merr kohÃ«n e pÃ«rfundimit
    return endTime - startTime; // Llogarit kohÃ«n e ngarkimit
  };

  // Testo ngarkimin e faqes kryesore
  const homePageLoadTime = await measureLoadTime('https://kselsig.com/');
  console.log(`KohÃ« ngarkimi pÃ«r faqen kryesore: ${homePageLoadTime} ms`);
  expect(homePageLoadTime).toBeLessThan(5000); // Verifikoni qÃ« koha e ngarkimit tÃ« jetÃ« mÃ« e vogÃ«l se 5000 ms

  // Testo ngarkimin e njÃ« faqe tjetÃ«r (p.sh., faqja "PÃ«r ne")
  const aboutPageLoadTime = await measureLoadTime('https://kselsig.com/per-ne');
  console.log(`KohÃ« ngarkimi pÃ«r faqen "PÃ«r ne": ${aboutPageLoadTime} ms`);
  expect(aboutPageLoadTime).toBeLessThan(5000); // Verifikoni qÃ« koha e ngarkimit tÃ« jetÃ« mÃ« e vogÃ«l se 5000 ms

  // Testo ngarkimin e njÃ« faqe tjetÃ«r (p.sh., faqja "ShÃ«rbimet")
  const servicesPageLoadTime = await measureLoadTime('https://kselsig.com/shÃ«rbimet');
  console.log(`KohÃ« ngarkimi pÃ«r faqen "ShÃ«rbimet": ${servicesPageLoadTime} ms`);
  expect(servicesPageLoadTime).toBeLessThan(5000); // Verifikoni qÃ« koha e ngarkimit tÃ« jetÃ« mÃ« e vogÃ«l se 5000 ms

  // Testo ngarkimin e njÃ« faqe tjetÃ«r (p.sh., faqja "Kontakt")
  const contactPageLoadTime = await measureLoadTime('https://kselsig.com/kontakt');
  console.log(`KohÃ« ngarkimi pÃ«r faqen "Kontakt": ${contactPageLoadTime} ms`);
  expect(contactPageLoadTime).toBeLessThan(5000); // Verifikoni qÃ« koha e ngarkimit tÃ« jetÃ« mÃ« e vogÃ«l se 5000 ms
});

